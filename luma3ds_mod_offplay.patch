diff -Naur Luma3DS/arm9/Makefile Luma3DS_mod_offplay/arm9/Makefile
--- Luma3DS/arm9/Makefile	2020-04-28 02:31:29.000000000 +0200
+++ Luma3DS_mod_offplay/arm9/Makefile	2020-04-29 04:13:16.032645000 +0200
@@ -9,19 +9,19 @@
 TOPDIR ?= $(CURDIR)
 include $(DEVKITARM)/base_rules
 
-export REVISION			:=	$(shell git describe --tags --match v[0-9]* --abbrev=8 | sed 's/-[0-9]*-g/-/')
-export VERSION_MAJOR	:=	$(shell git describe --tags --match v[0-9]* | cut -c2- | cut -f1 -d- | cut -f1 -d.)
-export VERSION_MINOR	:=	$(shell git describe --tags --match v[0-9]* | cut -c2- | cut -f1 -d- | cut -f2 -d.)
-export VERSION_BUILD	:=	$(shell git describe --tags --match v[0-9]* | cut -c2- | cut -f1 -d- | cut -f3 -d.)
-export COMMIT			:=	$(shell git rev-parse --short=8 HEAD)
+#export REVISION			:=	$(shell git describe --tags --match v[0-9]* --abbrev=8 | sed 's/-[0-9]*-g/-/')
+#export VERSION_MAJOR	:=	$(shell git describe --tags --match v[0-9]* | cut -c2- | cut -f1 -d- | cut -f1 -d.)
+#export VERSION_MINOR	:=	$(shell git describe --tags --match v[0-9]* | cut -c2- | cut -f1 -d- | cut -f2 -d.)
+#export VERSION_BUILD	:=	$(shell git describe --tags --match v[0-9]* | cut -c2- | cut -f1 -d- | cut -f3 -d.)
+export COMMIT			:=	1#$(shell git rev-parse --short=8 HEAD)
 export IS_RELEASE		:=	0
 
-ifeq ($(strip $(REVISION)),)
-	export REVISION			:=	v0.0.0-0
-	export VERSION_MAJOR	:=	0
-	export VERSION_MINOR	:=	0
-	export VERSION_BUILD	:=	0
-endif
+#ifeq ($(strip $(REVISION)),)
+export REVISION			:=	v10.1.3
+export VERSION_MAJOR	:=	10
+export VERSION_MINOR	:=	1
+export VERSION_BUILD	:=	3
+#endif
 
 ifeq ($(strip $(COMMIT)),)
 	export COMMIT			:=	0
@@ -42,7 +42,7 @@
 # DATA is a list of directories containing data files
 # INCLUDES is a list of directories containing header files
 #---------------------------------------------------------------------------------
-APP_TITLE	:=	Luma3DS
+APP_TITLE	:=	Luma3DS OffPlay mod
 TARGET		:=	$(notdir $(CURDIR))
 BUILD		:=	build
 SOURCES		:=	source source/fatfs source/fatfs/sdmmc
diff -Naur Luma3DS/arm9/source/config.c Luma3DS_mod_offplay/arm9/source/config.c
--- Luma3DS/arm9/source/config.c	2020-04-28 02:31:29.000000000 +0200
+++ Luma3DS_mod_offplay/arm9/source/config.c	2020-04-29 18:12:47.588391000 +0200
@@ -85,6 +85,7 @@
                                                "Splash duration: 1( ) 3( ) 5( ) 7( ) seconds",
                                                "PIN lock: Off( ) 4( ) 6( ) 8( ) digits",
                                                "New 3DS CPU: Off( ) Clock( ) L2( ) Clock+L2( )",
+                                               "OffPlay: Off( ) 10m( ) 20m( ) 30m( ) 1h( ) 2h( )",
                                              };
 
     static const char *singleOptionsText[] = { "( ) Autoboot EmuNAND",
@@ -131,6 +132,16 @@
                                                  "'Clock+L2' can cause issues with some\n"
                                                  "games.",
 
+                                                 "############_PLAYTIME_MOD_############\n"
+                                                 "Select the allowed playing time\n"
+                                                 "after which the device will\n"
+                                                 "automatically shut down.\n\n"
+                                                 "Paired with the PIN lock feature,\n"
+                                                 "this could be used to limit a\n"
+                                                 "child's playtime.\n\n"
+                                                 "This can be deactivated in the\n"
+                                                 "(L + DOWN + select) menu.",
+
                                                  "If enabled, an EmuNAND\n"
                                                  "will be launched on boot.\n\n"
                                                  "Otherwise, SysNAND will.\n\n"
@@ -204,17 +215,18 @@
     }
 
     struct multiOption {
-        u32 posXs[4];
+        u32 posXs[7];
         u32 posY;
         u32 enabled;
         bool visible;
     } multiOptions[] = {
         { .visible = nandType == FIRMWARE_EMUNAND },
         { .visible = true },
-        { .visible = true  },
+        { .visible = true },
         { .visible = true },
         { .visible = true },
         { .visible = ISN3DS },
+        { .visible = true },
     };
 
     struct singleOption {
@@ -245,9 +257,9 @@
     {
         //Detect the positions where the "x" should go
         u32 optionNum = 0;
-        for(u32 j = 0; optionNum < 4 && j < strlen(multiOptionsText[i]); j++)
+        for(u32 j = 0; optionNum < 6 && j < strlen(multiOptionsText[i]); j++)
             if(multiOptionsText[i][j] == '(') multiOptions[i].posXs[optionNum++] = j + 1;
-        while(optionNum < 4) multiOptions[i].posXs[optionNum++] = 0;
+        while(optionNum < 6) multiOptions[i].posXs[optionNum++] = 0;
 
         multiOptions[i].enabled = MULTICONFIG(i);
     }
@@ -386,7 +398,7 @@
             {
                 u32 oldEnabled = multiOptions[selectedOption].enabled;
                 drawCharacter(true, 10 + multiOptions[selectedOption].posXs[oldEnabled] * SPACING_X, multiOptions[selectedOption].posY, COLOR_BLACK, selected);
-                multiOptions[selectedOption].enabled = (oldEnabled == 3 || !multiOptions[selectedOption].posXs[oldEnabled + 1]) ? 0 : oldEnabled + 1;
+                multiOptions[selectedOption].enabled = (oldEnabled == 5 || !multiOptions[selectedOption].posXs[oldEnabled + 1]) ? 0 : oldEnabled + 1;
 
                 if(selectedOption == BRIGHTNESS) updateBrightness(multiOptions[BRIGHTNESS].enabled);
             }
@@ -406,7 +418,9 @@
     //Parse and write the new configuration
     configData.multiConfig = 0;
     for(u32 i = 0; i < multiOptionsAmount; i++)
-        configData.multiConfig |= multiOptions[i].enabled << (i * 2);
+        //If OffPlay with 6 chooses
+        if (i == 7) configData.multiConfig |= multiOptions[i].enabled << (i * 6);
+        else configData.multiConfig |= multiOptions[i].enabled << (i * 4);
 
     configData.config = 0;
     for(u32 i = 0; i < singleOptionsAmount; i++)
diff -Naur Luma3DS/arm9/source/config.h Luma3DS_mod_offplay/arm9/source/config.h
--- Luma3DS/arm9/source/config.h	2020-04-28 02:31:29.000000000 +0200
+++ Luma3DS_mod_offplay/arm9/source/config.h	2020-04-29 16:02:22.006131000 +0200
@@ -29,12 +29,12 @@
 #include "types.h"
 
 #define CONFIG(a)        (((configData.config >> (a)) & 1) != 0)
-#define MULTICONFIG(a)   ((configData.multiConfig >> (2 * (a))) & 3)
+#define MULTICONFIG(a)   ((configData.multiConfig >> (4 * (a))) & 7)
 #define BOOTCONFIG(a, b) ((configData.bootConfig >> (a)) & (b))
 
 #define CONFIG_FILE         "config.bin"
 #define CONFIG_VERSIONMAJOR 2
-#define CONFIG_VERSIONMINOR 3
+#define CONFIG_VERSIONMINOR 4
 
 #define BOOTCFG_NAND         BOOTCONFIG(0, 7)
 #define BOOTCFG_FIRM         BOOTCONFIG(3, 7)
@@ -48,7 +48,8 @@
     SPLASH,
     SPLASH_DURATION,
     PIN,
-    NEWCPU
+    NEWCPU,
+    OFFPLAY
 };
 
 enum singleOptions
diff -Naur Luma3DS/arm9/source/patches.c Luma3DS_mod_offplay/arm9/source/patches.c
--- Luma3DS/arm9/source/patches.c	2020-04-28 02:31:29.000000000 +0200
+++ Luma3DS_mod_offplay/arm9/source/patches.c	2020-04-28 22:09:30.023246000 +0200
@@ -41,6 +41,7 @@
 #include "utils.h"
 #include "arm9_exception_handlers.h"
 #include "large_patches.h"
+#include "pin.h"
 
 #define K11EXT_VA         0x70000000
 
@@ -127,7 +128,10 @@
             u16 configFormatVersionMajor, configFormatVersionMinor;
             u32 config, multiConfig, bootConfig;
             u64 hbldr3dsxTitleId;
+
             u32 rosalinaMenuCombo;
+
+            u8 pin[0x10];
         } info;
     };
 
@@ -197,6 +201,7 @@
     info->bootConfig = configData.bootConfig;
     info->hbldr3dsxTitleId = configData.hbldr3dsxTitleId;
     info->rosalinaMenuCombo = configData.rosalinaMenuCombo;
+    memcpy(&info->pin, &pinLetters, AES_BLOCK_SIZE);
     info->versionMajor = VERSION_MAJOR;
     info->versionMinor = VERSION_MINOR;
     info->versionBuild = VERSION_BUILD;
diff -Naur Luma3DS/arm9/source/pin.c Luma3DS_mod_offplay/arm9/source/pin.c
--- Luma3DS/arm9/source/pin.c	2020-04-28 02:31:29.000000000 +0200
+++ Luma3DS_mod_offplay/arm9/source/pin.c	2020-04-28 22:11:07.814351000 +0200
@@ -47,7 +47,7 @@
 
     return keys[31 - i];
 }
-
+__attribute__((aligned(4))) u8 pinLetters[AES_BLOCK_SIZE] = {0};
 void newPin(bool allowSkipping, u32 pinMode)
 {
     clearScreens(false);
@@ -97,7 +97,7 @@
         if(!pressed) continue;
 
         //Add character to password
-        enteredPassword[cnt] = (u8)pinKeyToLetter(pressed);
+        enteredPassword[cnt] = pinLetters[cnt] = (u8)pinKeyToLetter(pressed);
 
         //Visualize character on screen
         drawCharacter(true, 10 + (16 + 2 * cnt) * SPACING_X, 10 + 3 * SPACING_Y, COLOR_WHITE, enteredPassword[cnt]);
@@ -211,7 +211,7 @@
         if(!pressed) continue;
 
         //Add character to password
-        enteredPassword[cnt] = (u8)pinKeyToLetter(pressed);
+        enteredPassword[cnt] = pinLetters[cnt] = (u8)pinKeyToLetter(pressed);
 
         //Visualize character on screen
         drawCharacter(true, 10 + (16 + 2 * cnt) * SPACING_X, 10 + 3 * SPACING_Y, COLOR_WHITE, '*');
diff -Naur Luma3DS/arm9/source/pin.h Luma3DS_mod_offplay/arm9/source/pin.h
--- Luma3DS/arm9/source/pin.h	2020-04-28 02:31:29.000000000 +0200
+++ Luma3DS_mod_offplay/arm9/source/pin.h	2020-04-28 22:12:08.956293000 +0200
@@ -29,12 +29,13 @@
 */
 
 #pragma once
-
 #include "types.h"
+#include "crypto.h"
 
 #define PIN_FILE         "pin.bin"
 #define PIN_VERSIONMAJOR 1
 #define PIN_VERSIONMINOR 3
+extern __attribute__((aligned(4))) u8 pinLetters[AES_BLOCK_SIZE];
 
 void newPin(bool allowSkipping, u32 pinMode);
 bool verifyPin(u32 pinMode);
diff -Naur Luma3DS/k11_extension/include/config.h Luma3DS_mod_offplay/k11_extension/include/config.h
--- Luma3DS/k11_extension/include/config.h	2020-04-28 02:31:29.000000000 +0200
+++ Luma3DS_mod_offplay/k11_extension/include/config.h	2020-04-29 16:02:28.110354000 +0200
@@ -6,7 +6,7 @@
 #define MAKE_BRANCH_LINK(src,dst) (0xEB000000 | ((u32)((((u8 *)(dst) - (u8 *)(src)) >> 2) - 2) & 0xFFFFFF))
 
 #define CONFIG(a)        (((cfwInfo.config >> (a)) & 1) != 0)
-#define MULTICONFIG(a)   ((cfwInfo.multiConfig >> (2 * (a))) & 3)
+#define MULTICONFIG(a)   ((cfwInfo.multiConfig >> (4 * (a))) & 7)
 #define BOOTCONFIG(a, b) ((cfwInfo.bootConfig >> (a)) & (b))
 
 #define BOOTCFG_NAND         BOOTCONFIG(0, 7)
@@ -21,7 +21,8 @@
     SPLASH,
     SPLASH_DURATION,
     PIN,
-    NEWCPU
+    NEWCPU,
+    OFFPLAY
 };
 
 enum singleOptions
diff -Naur Luma3DS/k11_extension/include/globals.h Luma3DS_mod_offplay/k11_extension/include/globals.h
--- Luma3DS/k11_extension/include/globals.h	2020-04-28 02:31:29.000000000 +0200
+++ Luma3DS_mod_offplay/k11_extension/include/globals.h	2020-04-28 22:03:15.691414000 +0200
@@ -129,6 +129,7 @@
     u32 config, multiConfig, bootConfig;
     u64 hbldr3dsxTitleId;
     u32 rosalinaMenuCombo;
+    u8 pin[0x10];
 } CfwInfo;
 
 extern CfwInfo cfwInfo;
diff -Naur Luma3DS/k11_extension/source/svc/GetSystemInfo.c Luma3DS_mod_offplay/k11_extension/source/svc/GetSystemInfo.c
--- Luma3DS/k11_extension/source/svc/GetSystemInfo.c	2020-04-28 02:31:29.000000000 +0200
+++ Luma3DS_mod_offplay/k11_extension/source/svc/GetSystemInfo.c	2020-04-28 18:43:42.497609000 +0200
@@ -32,7 +32,8 @@
 Result GetSystemInfoHook(s64 *out, s32 type, s32 param)
 {
     Result res = 0;
-
+    u8 **p1;
+    u8 **p2;
     switch(type)
     {
         case 0x10000:
@@ -64,7 +65,15 @@
                 case 0x101:
                     *out = cfwInfo.rosalinaMenuCombo;
                     break;
-
+                // no idea why this works, or how to do it properly...
+                case 0x102:
+                    p1 = (void *)&cfwInfo.pin;
+                    *out = (int)*p1;
+                    break;
+                case 0x103:
+                    p2 = (void *)&cfwInfo.pin[4];
+                    *out = (int)*p2;
+                    break;
                 case 0x200: // isRelease
                     *out = cfwInfo.flags & 1;
                     break;
diff -Naur Luma3DS/Makefile Luma3DS_mod_offplay/Makefile
--- Luma3DS/Makefile	2020-04-28 02:31:29.000000000 +0200
+++ Luma3DS_mod_offplay/Makefile	2020-04-28 21:54:24.162889000 +0200
@@ -3,7 +3,7 @@
 endif
 
 NAME		:=	$(notdir $(CURDIR))
-REVISION	:=	$(shell git describe --tags --match v[0-9]* --abbrev=8 | sed 's/-[0-9]*-g/-/')
+REVISION	:=	v10.1
 
 SUBFOLDERS	:=	sysmodules arm11 arm9 k11_extension
 
diff -Naur Luma3DS/sysmodules/loader/source/patcher.h Luma3DS_mod_offplay/sysmodules/loader/source/patcher.h
--- Luma3DS/sysmodules/loader/source/patcher.h	2020-04-28 02:31:29.000000000 +0200
+++ Luma3DS_mod_offplay/sysmodules/loader/source/patcher.h	2020-04-29 16:02:33.162538000 +0200
@@ -8,7 +8,7 @@
 #define MAKE_BRANCH_LINK(src,dst) (0xEB000000 | ((u32)((((u8 *)(dst) - (u8 *)(src)) >> 2) - 2) & 0xFFFFFF))
 
 #define CONFIG(a)        (((config >> (a)) & 1) != 0)
-#define MULTICONFIG(a)   ((multiConfig >> (2 * (a))) & 3)
+#define MULTICONFIG(a)   ((multiConfig >> (4 * (a))) & 7)
 #define BOOTCONFIG(a, b) ((bootConfig >> (a)) & (b))
 
 #define BOOTCFG_NAND         BOOTCONFIG(0, 7)
@@ -23,7 +23,8 @@
     SPLASH,
     SPLASH_DURATION,
     PIN,
-    NEWCPU
+    NEWCPU,
+    OFFPLAY
 };
 
 enum singleOptions
diff -Naur Luma3DS/sysmodules/rosalina/include/config.h Luma3DS_mod_offplay/sysmodules/rosalina/include/config.h
--- Luma3DS/sysmodules/rosalina/include/config.h	1970-01-01 01:00:00.000000000 +0100
+++ Luma3DS_mod_offplay/sysmodules/rosalina/include/config.h	2020-04-29 19:18:06.089355000 +0200
@@ -0,0 +1,47 @@
+/*
+*   This file is part of Luma3DS
+*   Copyright (C) 2016-2017 Aurora Wright, TuxSH
+*
+*   This program is free software: you can redistribute it and/or modify
+*   it under the terms of the GNU General Public License as published by
+*   the Free Software Foundation, either version 3 of the License, or
+*   (at your option) any later version.
+*
+*   This program is distributed in the hope that it will be useful,
+*   but WITHOUT ANY WARRANTY; without even the implied warranty of
+*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+*   GNU General Public License for more details.
+*
+*   You should have received a copy of the GNU General Public License
+*   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*
+*   Additional Terms 7.b and 7.c of GPLv3 apply to this file:
+*       * Requiring preservation of specified reasonable legal notices or
+*         author attributions in that material or in the Appropriate Legal
+*         Notices displayed by works containing it.
+*       * Prohibiting misrepresentation of the origin of that material,
+*         or requiring that modified versions of such material be marked in
+*         reasonable ways as different from the original version.
+*/
+
+#pragma once
+
+#include <3ds/types.h>
+#include <3ds/exheader.h>
+
+u32 multiConfig;
+
+#define MULTICONFIG(a)   ((multiConfig >> (4 * (a))) & 7)
+
+enum multiOptions
+{
+    DEFAULTEMU = 0,
+    BRIGHTNESS,
+    SPLASH,
+    SPLASH_DURATION,
+    PIN,
+    NEWCPU,
+    OFFPLAY
+};
+
+void loadMultiConfig(void);
diff -Naur Luma3DS/sysmodules/rosalina/include/draw.h Luma3DS_mod_offplay/sysmodules/rosalina/include/draw.h
--- Luma3DS/sysmodules/rosalina/include/draw.h	2020-04-28 02:31:29.000000000 +0200
+++ Luma3DS_mod_offplay/sysmodules/rosalina/include/draw.h	2020-04-28 22:20:19.256605000 +0200
@@ -68,7 +68,9 @@
 #define COLOR_WHITE RGB565(0x1F, 0x3F, 0x1F)
 #define COLOR_RED   RGB565(0x1F, 0x00, 0x00)
 #define COLOR_GREEN RGB565(0x00, 0x1F, 0x00)
+#define COLOR_GREEN_BRIGHT RGB565(0x00, 0xFF, 0x00)
 #define COLOR_BLACK RGB565(0x00, 0x00, 0x00)
+#define COLOR_YELLOW RGB565(0xFF, 0xFF, 0x00)
 
 #define DRAW_MAX_FORMATTED_STRING_SIZE  512
 
diff -Naur Luma3DS/sysmodules/rosalina/include/menu.h Luma3DS_mod_offplay/sysmodules/rosalina/include/menu.h
--- Luma3DS/sysmodules/rosalina/include/menu.h	2020-04-28 02:31:29.000000000 +0200
+++ Luma3DS_mod_offplay/sysmodules/rosalina/include/menu.h	2020-04-28 15:52:03.672775000 +0200
@@ -74,6 +74,7 @@
 extern Handle terminationRequestEvent;
 
 extern u32 menuCombo;
+extern bool menuActive;
 
 u32 waitInputWithTimeout(u32 msec);
 u32 waitInput(void);
diff -Naur Luma3DS/sysmodules/rosalina/include/menus/miscellaneous.h Luma3DS_mod_offplay/sysmodules/rosalina/include/menus/miscellaneous.h
--- Luma3DS/sysmodules/rosalina/include/menus/miscellaneous.h	2020-04-28 02:31:29.000000000 +0200
+++ Luma3DS_mod_offplay/sysmodules/rosalina/include/menus/miscellaneous.h	2020-04-28 15:53:05.463266000 +0200
@@ -35,4 +35,5 @@
 void MiscellaneousMenu_ChangeMenuCombo(void);
 void MiscellaneousMenu_SaveSettings(void);
 void MiscellaneousMenu_InputRedirection(void);
+void MiscellaneousMenu_DisableOffPlay(void);
 void MiscellaneousMenu_SyncTimeDate(void);
diff -Naur Luma3DS/sysmodules/rosalina/include/pin.h Luma3DS_mod_offplay/sysmodules/rosalina/include/pin.h
--- Luma3DS/sysmodules/rosalina/include/pin.h	1970-01-01 01:00:00.000000000 +0100
+++ Luma3DS_mod_offplay/sysmodules/rosalina/include/pin.h	2020-04-29 19:18:38.230378000 +0200
@@ -0,0 +1,38 @@
+/*
+*   This file is part of Luma3DS
+*   Copyright (C) 2016-2017 Aurora Wright, TuxSH
+*
+*   This program is free software: you can redistribute it and/or modify
+*   it under the terms of the GNU General Public License as published by
+*   the Free Software Foundation, either version 3 of the License, or
+*   (at your option) any later version.
+*
+*   This program is distributed in the hope that it will be useful,
+*   but WITHOUT ANY WARRANTY; without even the implied warranty of
+*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+*   GNU General Public License for more details.
+*
+*   You should have received a copy of the GNU General Public License
+*   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*
+*   Additional Terms 7.b and 7.c of GPLv3 apply to this file:
+*       * Requiring preservation of specified reasonable legal notices or
+*         author attributions in that material or in the Appropriate Legal
+*         Notices displayed by works containing it.
+*       * Prohibiting misrepresentation of the origin of that material,
+*         or requiring that modified versions of such material be marked in
+*         reasonable ways as different from the original version.
+*/
+
+/*
+*   Code originally by reworks
+*/
+
+#pragma once
+
+#define DPAD_BUTTONS (BUTTON_LEFT | BUTTON_RIGHT | BUTTON_UP | BUTTON_DOWN)
+#define PIN_BUTTONS  (BUTTON_A | BUTTON_B | BUTTON_X | BUTTON_Y | DPAD_BUTTONS | BUTTON_START | BUTTON_SELECT)
+
+#define AES_BLOCK_SIZE 0x10
+
+bool verifyPin(u32 pinMode);
diff -Naur Luma3DS/sysmodules/rosalina/include/offplay.h Luma3DS_mod_offplay/sysmodules/rosalina/include/offplay.h
--- Luma3DS/sysmodules/rosalina/include/offplay.h	1970-01-01 01:00:00.000000000 +0100
+++ Luma3DS_mod_offplay/sysmodules/rosalina/include/offplay.h	2020-04-29 19:19:01.291113000 +0200
@@ -0,0 +1,13 @@
+#pragma once
+
+#include <3ds/types.h>
+#include "MyThread.h"
+
+MyThread *offPlayCreateThread(void);
+
+void offPlayThreadMain(void);
+
+extern bool offPlaySet;
+extern int offPlayHours, offPlayMinutes, offPlaySeconds;
+extern u64 timeStart;
+extern int timeLeftHours, timeLeftMinutes, timeLeftSeconds;
diff -Naur Luma3DS/sysmodules/rosalina/source/config.c Luma3DS_mod_offplay/sysmodules/rosalina/source/config.c
--- Luma3DS/sysmodules/rosalina/source/config.c	1970-01-01 01:00:00.000000000 +0100
+++ Luma3DS_mod_offplay/sysmodules/rosalina/source/config.c	2020-04-29 19:19:13.235493000 +0200
@@ -0,0 +1,12 @@
+#include <3ds.h>
+#include "config.h"
+
+u32 multiConfig;
+
+void loadMultiConfig(void)
+{
+
+    s64 out;
+    if(R_FAILED(svcGetSystemInfo(&out, 0x10000, 4))) svcBreak(USERBREAK_ASSERT);
+    multiConfig = (u32)out;
+}
diff -Naur Luma3DS/sysmodules/rosalina/source/main.c Luma3DS_mod_offplay/sysmodules/rosalina/source/main.c
--- Luma3DS/sysmodules/rosalina/source/main.c	2020-04-28 02:31:29.000000000 +0200
+++ Luma3DS_mod_offplay/sysmodules/rosalina/source/main.c	2020-04-28 16:01:57.495066000 +0200
@@ -31,6 +31,7 @@
 #include "errdisp.h"
 #include "hbloader.h"
 #include "3dsx.h"
+#include "offplay.h"
 #include "utils.h"
 #include "MyThread.h"
 #include "menus/process_patches.h"
@@ -224,6 +225,7 @@
     MyThread *menuThread = menuCreateThread();
     MyThread *taskRunnerThread = taskRunnerCreateThread();
     MyThread *errDispThread = errDispCreateThread();
+    MyThread *offPlayThread = offPlayCreateThread();
 
     if (R_FAILED(ServiceManager_Run(services, notifications, NULL)))
         svcBreak(USERBREAK_PANIC);
@@ -233,6 +235,7 @@
     MyThread_Join(menuThread, -1LL);
     MyThread_Join(taskRunnerThread, -1LL);
     MyThread_Join(errDispThread, -1LL);
+    MyThread_Join(offPlayThread, -1LL);
 
     return 0;
 }
diff -Naur Luma3DS/sysmodules/rosalina/source/menu.c Luma3DS_mod_offplay/sysmodules/rosalina/source/menu.c
--- Luma3DS/sysmodules/rosalina/source/menu.c	2020-04-28 02:31:29.000000000 +0200
+++ Luma3DS_mod_offplay/sysmodules/rosalina/source/menu.c	2020-04-28 21:45:52.923780000 +0200
@@ -35,6 +35,7 @@
 #include "menus/n3ds.h"
 #include "menus/cheats.h"
 #include "minisoc.h"
+#include "offplay.h"
 
 u32 waitInputWithTimeout(u32 msec)
 {
@@ -137,6 +138,8 @@
 
 extern bool isN3DS;
 u32 menuCombo;
+bool menuActive = false;
+
 
 void menuThreadMain(void)
 {
@@ -184,6 +187,7 @@
         svcSleepThread(5 * 1000 * 100LL);
         Draw_SetupFramebuffer();
         Draw_ClearFramebuffer();
+        menuActive = true;
     }
 }
 
@@ -198,6 +202,7 @@
         Draw_RestoreFramebuffer();
         Draw_Unlock();
         svcKernelSetState(0x10000, 1);
+        menuActive = false;
     }
 }
 
@@ -263,6 +268,26 @@
     else
         Draw_DrawFormattedString(10, SCREEN_BOT_HEIGHT - 20, COLOR_TITLE, "Luma3DS %s-%08lx", versionString, commitHash);
 
+    if(offPlaySet)
+    {
+        if(timeLeftMinutes < 5)
+        {
+            if(timeLeftMinutes < 1)
+                Draw_DrawFormattedString(SCREEN_BOT_WIDTH - 10 - 10 * SPACING_X, SCREEN_BOT_HEIGHT - 50, COLOR_RED, "%02dh%02dm%02ds", timeLeftHours, timeLeftMinutes, timeLeftSeconds);
+            else
+                Draw_DrawFormattedString(SCREEN_BOT_WIDTH - 10 - 10 * SPACING_X, SCREEN_BOT_HEIGHT - 50, COLOR_YELLOW, "%02dh%02dm%02ds", timeLeftHours, timeLeftMinutes, timeLeftSeconds);
+        }
+        else
+            Draw_DrawFormattedString(SCREEN_BOT_WIDTH - 10 - 10 * SPACING_X, SCREEN_BOT_HEIGHT - 50, COLOR_GREEN, "%02dh%02dm%02ds", timeLeftHours, timeLeftMinutes, timeLeftSeconds);
+        Draw_DrawFormattedString(SCREEN_BOT_WIDTH - 10 - 10 * SPACING_X, SCREEN_BOT_HEIGHT - 40, COLOR_WHITE, "%02dh%02dm%02ds", offPlayHours, offPlayMinutes, offPlaySeconds);
+    }
+    else
+    {
+        Draw_DrawFormattedString(SCREEN_BOT_WIDTH - 10 - 10 * SPACING_X, SCREEN_BOT_HEIGHT - 50, COLOR_BLACK, "         ");
+        Draw_DrawFormattedString(SCREEN_BOT_WIDTH - 10 - 13 * SPACING_X, SCREEN_BOT_HEIGHT - 40, COLOR_BLACK, "            ");
+    }
+
+
     Draw_FlushFramebuffer();
 }
 
diff -Naur Luma3DS/sysmodules/rosalina/source/menus/miscellaneous.c Luma3DS_mod_offplay/sysmodules/rosalina/source/menus/miscellaneous.c
--- Luma3DS/sysmodules/rosalina/source/menus/miscellaneous.c	2020-04-28 02:31:29.000000000 +0200
+++ Luma3DS_mod_offplay/sysmodules/rosalina/source/menus/miscellaneous.c	2020-04-29 15:43:17.855551000 +0200
@@ -33,19 +33,23 @@
 #include "hbloader.h"
 #include "fmt.h"
 #include "utils.h" // for makeArmBranch
+#include "offplay.h"
+#include "pin.h"
+#include "config.h"
 #include "minisoc.h"
 #include "ifile.h"
 #include "pmdbgext.h"
 
 Menu miscellaneousMenu = {
     "Miscellaneous options menu",
-    .nbItems = 5,
+    .nbItems = 6,
     {
         { "Switch the hb. title to the current app.", METHOD, .method = &MiscellaneousMenu_SwitchBoot3dsxTargetTitle },
         { "Change the menu combo", METHOD, .method = &MiscellaneousMenu_ChangeMenuCombo },
         { "Start InputRedirection", METHOD, .method = &MiscellaneousMenu_InputRedirection },
         { "Sync time and date via NTP", METHOD, .method = &MiscellaneousMenu_SyncTimeDate },
         { "Save settings", METHOD, .method = &MiscellaneousMenu_SaveSettings },
+        { "Disable time limit", METHOD, .method = &MiscellaneousMenu_DisableOffPlay },
     }
 };
 
@@ -319,6 +323,89 @@
     while(!(waitInput() & BUTTON_B) && !terminationRequest);
 }
 
+
+void MiscellaneousMenu_DisableOffPlay(void)
+{
+    bool offPlaySetBak = offPlaySet;
+    offPlaySet = false; // prevent shutdown
+
+    loadMultiConfig();
+    u32 pinMode = MULTICONFIG(PIN);
+
+    Draw_Lock();
+    Draw_ClearFramebuffer();
+    Draw_FlushFramebuffer();
+    Draw_Unlock();
+
+    do
+    {
+        Draw_Lock();
+        Draw_DrawString(10, 10, COLOR_TITLE, "Miscellaneous options menu");
+        Draw_DrawString(10, 30, COLOR_WHITE, "Press A to disable the time limit,\npress B to go back.");
+        Draw_FlushFramebuffer();
+        Draw_Unlock();
+
+        u32 pressed = waitInputWithTimeout(1000);
+
+        if(pressed & BUTTON_A)
+        {
+            Draw_Lock();
+            Draw_FlushFramebuffer();
+            Draw_ClearFramebuffer();
+            Draw_Unlock();
+
+            Draw_Lock();
+            if(offPlaySetBak)
+            {
+                bool pinCorrect = verifyPin(pinMode);
+
+                if(pinCorrect || (pinMode == 0))
+                {
+                    Draw_ClearFramebuffer();
+                    Draw_FlushFramebuffer();
+
+                    do
+                    {
+                        Draw_DrawString(10, 10, COLOR_TITLE, "Miscellaneous options menu");
+                        Draw_DrawString(10, 30, COLOR_WHITE, "The time limit has been disabled.");
+                        Draw_FlushFramebuffer();
+                    }
+                    while(!(waitInput() & BUTTON_B) && !terminationRequest);
+                }
+                else
+                {
+                    offPlaySet = offPlaySetBak;
+                }
+            }
+            else
+            {
+                do
+                {
+                    Draw_DrawString(10, 10, COLOR_TITLE, "Miscellaneous options menu");
+                    Draw_DrawString(10, 30, COLOR_WHITE, "The time limit is already disabled.");
+                    Draw_FlushFramebuffer();
+                }
+                while(!(waitInput() & BUTTON_B) && !terminationRequest);
+            }
+            Draw_ClearFramebuffer();
+            Draw_FlushFramebuffer();
+            Draw_Unlock();
+            return;
+        }
+        else if(pressed & BUTTON_B)
+        {
+            Draw_Lock();
+            Draw_ClearFramebuffer();
+            Draw_FlushFramebuffer();
+            Draw_Unlock();
+
+            offPlaySet = offPlaySetBak;
+            return;
+        }
+    }
+    while(!terminationRequest);
+}
+
 void MiscellaneousMenu_SyncTimeDate(void)
 {
     u32 posY;
diff -Naur Luma3DS/sysmodules/rosalina/source/pin.c Luma3DS_mod_offplay/sysmodules/rosalina/source/pin.c
--- Luma3DS/sysmodules/rosalina/source/pin.c	1970-01-01 01:00:00.000000000 +0100
+++ Luma3DS_mod_offplay/sysmodules/rosalina/source/pin.c	2020-04-29 19:19:50.204670000 +0200
@@ -0,0 +1,118 @@
+/*
+*   This file is part of Luma3DS
+*   Copyright (C) 2016-2017 Aurora Wright, TuxSH
+*
+*   This program is free software: you can redistribute it and/or modify
+*   it under the terms of the GNU General Public License as published by
+*   the Free Software Foundation, either version 3 of the License, or
+*   (at your option) any later version.
+*
+*   This program is distributed in the hope that it will be useful,
+*   but WITHOUT ANY WARRANTY; without even the implied warranty of
+*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+*   GNU General Public License for more details.
+*
+*   You should have received a copy of the GNU General Public License
+*   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*
+*   Additional Terms 7.b and 7.c of GPLv3 apply to this file:
+*       * Requiring preservation of specified reasonable legal notices or
+*         author attributions in that material or in the Appropriate Legal
+*         Notices displayed by works containing it.
+*       * Prohibiting misrepresentation of the origin of that material,
+*         or requiring that modified versions of such material be marked in
+*         reasonable ways as different from the original version.
+*/
+
+/*
+*   Code originally by reworks
+*/
+
+#include "draw.h"
+#include "memory.h"
+#include "menu.h"
+#include "pin.h"
+
+char pinKeyToLetter(u32 pressed)
+{
+    static const char *keys = "AB--RLUD--XY";
+
+    u32 i;
+    for(i = 31; pressed > 1; i--) pressed /= 2;
+
+    return keys[31 - i];
+}
+
+bool verifyPin(u32 pinMode)
+{
+    if(pinMode == 0) return false;
+    u8 length = 4 + 2 * (pinMode - 1);
+    __attribute__((aligned(4))) u8 pinOriginal[AES_BLOCK_SIZE] = {0};
+
+    s64 out;
+    if(R_FAILED(svcGetSystemInfo(&out, 0x10000, 0x102))) svcBreak(USERBREAK_ASSERT);
+    memcpy(&pinOriginal, &out, 4);
+    if(R_FAILED(svcGetSystemInfo(&out, 0x10000, 0x103))) svcBreak(USERBREAK_ASSERT);
+    memcpy(&pinOriginal[4], &out, 4);
+
+    Draw_DrawString(10, 10, COLOR_TITLE, "Enter your PIN using ABXY and the DPad to proceed");
+    Draw_DrawString(10, 10 + SPACING_Y, COLOR_TITLE, "Press START to cancel, SELECT to clear");
+
+    Draw_DrawFormattedString(10, 10 + 3 * SPACING_Y, COLOR_WHITE, "PIN (%u digits): ", length);
+
+    __attribute__((aligned(4))) u8 enteredPassword[AES_BLOCK_SIZE] = {0};
+
+    bool unlock = false,
+         reset = false;
+    u8 cnt = 0;
+
+    while(!unlock && !terminationRequest)
+    {
+        if(reset)
+        {
+            for(u32 i = 0; i < cnt; i++) 
+                Draw_DrawCharacter(10 + (16 + 2 * i) * SPACING_X, 10 + 3 * SPACING_Y, COLOR_BLACK, '*');
+
+            cnt = 0;
+            reset = false;
+        }
+
+        u32 pressed;
+        do
+        {
+            pressed = waitInput();
+        }
+        while(!(pressed & PIN_BUTTONS) && !terminationRequest);
+
+        if(pressed & BUTTON_START) return false;
+
+        pressed &= PIN_BUTTONS;
+
+        if(pressed & BUTTON_SELECT)
+        {
+            reset = true;
+            continue;
+        }
+
+        if(!pressed) continue;
+
+        //Add character to password
+        enteredPassword[cnt] = (u8)pinKeyToLetter(pressed);
+
+        //Visualize character on screen
+        Draw_DrawCharacter(10 + (16 + 2 * cnt) * SPACING_X, 10 + 3 * SPACING_Y, COLOR_WHITE, '*');
+
+        if(++cnt < length) continue;
+
+        unlock = memcmp(&pinOriginal, &enteredPassword, length) == 0;
+
+        if(!unlock)
+        {
+            reset = true;
+
+            Draw_DrawString(10, 10 + 5 * SPACING_Y, COLOR_RED, "Wrong PIN, try again"); 
+        }
+    }
+
+    return true;
+}
diff -Naur Luma3DS/sysmodules/rosalina/source/offplay.c Luma3DS_mod_offplay/sysmodules/rosalina/source/offplay.c
--- Luma3DS/sysmodules/rosalina/source/offplay.c	1970-01-01 01:00:00.000000000 +0100
+++ Luma3DS_mod_offplay/sysmodules/rosalina/source/offplay.c	2020-04-29 19:15:45.700887000 +0200
@@ -0,0 +1,193 @@
+#include <3ds.h>
+#include <3ds/types.h>
+#include <inttypes.h>
+
+#include "config.h"
+#include "draw.h"
+#include "fmt.h"
+#include "memory.h"
+#include "menu.h"
+#include "offplay.h"
+#include "pin.h"
+
+void CreateTimeString(int h, int m, char *out)
+{
+    if ((h >= 1))
+    {
+        if (m == 0)
+        {
+            sprintf(out, !(h == 1) ? "%d hours." : "%d hour.", h);
+        }
+        else
+        {
+            if (!(h == 1))
+            {
+                sprintf(out, (m > 1) ? "%d hours and %d minutes." : "%d hours and %d minute.", h, m);
+            }
+            else
+            {
+                sprintf(out, (m > 1) ? "%d hour and %d minutes." : "%d hour and %d minute.", h, m);
+            }
+        }
+    }
+    else
+    {
+        sprintf(out, !(m == 1) ? "%d minutes." : "%d minute.", m);
+    }
+}
+
+int DrawCalcXPos(char *s)
+{
+    return (10 + ( ( ( ( (320 - (2 * 10) ) / 6) / 2) - (strlen(s) / 2) ) * 6) );
+}
+
+static MyThread offPlayThread;
+//static u8 ALIGN(8) offPlayThreadStack[THREAD_STACK_SIZE];
+static u8 ALIGN(8) offPlayThreadStack[0xD00];
+
+
+MyThread *offPlayCreateThread(void)
+{
+    //if(R_FAILED(MyThread_Create(&offPlayThread, offPlayThreadMain, offPlayThreadStack, THREAD_STACK_SIZE, 0x3F, CORE_SYSTEM)))
+    if(R_FAILED(MyThread_Create(&offPlayThread, offPlayThreadMain, offPlayThreadStack, 0xD00, 55, CORE_SYSTEM)))
+        svcBreak(USERBREAK_PANIC);
+    return &offPlayThread;
+}
+
+
+bool offPlaySet;
+int offPlayHours, offPlayMinutes, offPlaySeconds;
+u64 timeStart;
+int timeLeftHours, timeLeftMinutes, timeLeftSeconds;
+
+void offPlayThreadMain(void)
+{
+
+    svcSleepThread(6.6 * 1000 * 1000 * 1000LL); // allow clock to initialize
+    
+    loadMultiConfig();
+
+    u32 timeMode = MULTICONFIG(OFFPLAY);
+    offPlaySet = false;
+    if (timeMode == 0)
+       svcExitThread();
+    else
+        offPlaySet = true;
+
+    const int offPlayOptions[5] = { 10, 20, 30, 60, 120 };
+    u16 offPlay = (offPlayOptions[timeMode - 1]) * 60;
+    offPlayHours = offPlay / 3600;
+    offPlayMinutes = (offPlay % 3600) / 60;
+    offPlaySeconds = offPlay % 60;
+
+    char offPlayString[24];
+    CreateTimeString(offPlayHours, offPlayMinutes, offPlayString);
+    int xPos = DrawCalcXPos(offPlayString);
+
+    menuEnter();
+    Draw_Lock();
+    Draw_ClearFramebuffer();
+    Draw_FlushFramebuffer();
+    do
+    {
+        Draw_DrawString(10 + 11 * SPACING_X, SCREEN_BOT_HEIGHT - 10 - 12 * SPACING_Y, COLOR_WHITE, "This device has been set to");
+        Draw_DrawString(10 + 12 * SPACING_X, SCREEN_BOT_HEIGHT - 10 - 11 * SPACING_Y, COLOR_WHITE, "automatically shutdown in");
+        Draw_DrawString(xPos               , SCREEN_BOT_HEIGHT - 10 - 10 * SPACING_Y, COLOR_WHITE, offPlayString);
+        Draw_DrawString(10 + 14 * SPACING_X, SCREEN_BOT_HEIGHT - 10 -  8 * SPACING_Y, COLOR_WHITE, "Press A to continue.");   
+        Draw_FlushFramebuffer();
+    }
+    while(!(waitInput() & BUTTON_A) && !terminationRequest);
+    Draw_ClearFramebuffer();
+    Draw_FlushFramebuffer();
+    Draw_Unlock();
+    menuLeave();
+
+    timeStart = osGetTime();
+    u64 timeCurrent, timeDiff;
+    u16 timeLeft;
+    int i = 0;
+
+    do
+    {
+        timeCurrent = osGetTime();
+        timeDiff = ((timeCurrent - timeStart) / 1000);
+        if(timeDiff <= offPlay) // prevent underflow
+            timeLeft = offPlay - timeDiff;
+        else
+            timeLeft = 0;
+        timeLeftHours = timeLeft / 3600;
+        timeLeftMinutes = (timeLeft % 3600) / 60;
+        timeLeftSeconds = timeLeft % 60;
+
+        if(offPlaySet && (timeLeft == 0))
+        {
+            bool menuActiveBak = menuActive;
+            if (!menuActive)
+                menuEnter();
+
+            Draw_Lock();
+            Draw_ClearFramebuffer();
+            Draw_FlushFramebuffer();
+            Draw_Unlock();
+            
+            Draw_Lock();
+            u32 pressed;
+            for(i = 10; i > 0; i--)
+            {
+                // overwrite trailing zero with space instead of reprinting whole text to prevent flickering
+                Draw_DrawFormattedString(10 + 18 * SPACING_X, SCREEN_BOT_HEIGHT - 10 - 11 * SPACING_Y, COLOR_RED, "Shutdown in %d ", i);
+                Draw_DrawFormattedString(10 + 16 * SPACING_X, SCREEN_BOT_HEIGHT - 10 -  9 * SPACING_Y, COLOR_WHITE, "Press B to cancel.", i);
+                Draw_FlushFramebuffer();
+            
+                pressed = waitInputWithTimeout(1000);
+                if(pressed & BUTTON_B)
+                {
+                    bool offPlaySetBak = offPlaySet;
+                    offPlaySet = false; // prevent shutdown
+
+                    u32 pinMode = MULTICONFIG(PIN);
+
+                    Draw_ClearFramebuffer();
+                    Draw_FlushFramebuffer();
+
+                    bool pinCorrect = verifyPin(pinMode);
+
+                    if(pinCorrect || (pinMode == 0))
+                    {
+                        Draw_ClearFramebuffer();
+                        Draw_FlushFramebuffer();
+
+                        do
+                        {
+                            Draw_DrawString(10 +  9 * SPACING_X, SCREEN_BOT_HEIGHT - 10 - 11 * SPACING_Y, COLOR_WHITE, "The time limit has been disabled.");
+                            Draw_DrawString(10 + 15 * SPACING_X, SCREEN_BOT_HEIGHT - 10 -  9 * SPACING_Y, COLOR_WHITE, "Press A to continue.");                                        
+                            Draw_FlushFramebuffer();
+                        }
+                        while(!(waitInput() & BUTTON_A) && !terminationRequest);
+
+                        Draw_ClearFramebuffer();
+                        Draw_FlushFramebuffer();
+                        Draw_Unlock();
+                        
+                        if (!menuActiveBak)
+                            menuLeave();
+                        svcExitThread();
+                    }
+                    else
+                    {
+                        Draw_ClearFramebuffer();
+                        Draw_FlushFramebuffer();
+                        offPlaySet = offPlaySetBak;
+                    }
+                }
+            }
+            Draw_Unlock();
+            menuLeave();
+            srvPublishToSubscriber(0x203, 0);
+            while(true);
+        }
+
+        svcSleepThread(1 * 1000 * 1000 * 1000LL);
+    }
+    while(!terminationRequest);
+}
